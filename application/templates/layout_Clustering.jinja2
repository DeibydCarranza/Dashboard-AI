<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://unpkg.com/aos@next/dist/aos.css" />

    <link rel="stylesheet" href="{{ url_for('static', filename='dist/css/styles.css') }}" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/boxicons@latest/css/boxicons.min.css">

    <title>{{ title }}</title>
      <link rel="shortcut icon" href="{{ url_for('static', filename='dist/img/favicon.png') }}" type="image/x-icon" />
</head>

<body class="dash-template">   
    <header class="header-top">
        <div class="nav-wrapper">
            <a href="/">
                <h1>Inicio</h1>
            </a>
        </div>
    </header>         
    {% include 'navbar.jinja2' %}

    <div class="content-container">
        <div>
            <h1>Clustering</h1>
            <p>Descripción</p>
        </div>
        <! ---------------------------- Upload ---------------------------------->
        <div class="box-upload">
            <form id="csv-form" action="{{ url_for('upload_csv') }}" method="POST" enctype="multipart/form-data">
                <input type="file" name="csv_file" accept=".csv" style="display: none;" onchange="submitForm()">
                <div class="upload-container">
                    Carga de archivo <a>Select CSV File</a>
                </div>
                <div id="output-data-upload"></div>
            </form>
        </div>
        <! ---------------------------- Estandarización ---------------------------------->
        <div class = 'buttons_metrics'>
            <button type="button" class="btn btn-primary btn-sm"  onclick="handleClick(event,'estandarizar')">
                Escalar
            </button>
            <button type="button" class="btn btn-secondary btn-sm" onclick="handleClick(event,'normalizar')">
                Normalizar
            </button
        <! ---------------------------- View results ---------------------------------->

            <button id="display-btn">
                Mostrar tabla
            </button>
        </div>
        <div id="table-container"></div>
         <! ---------------------------- Dropdown ---------------------------------->
        <select id="myDropdown">
            <option value="chebyshev">Chevichev</option>
            <option value="euclidean">Euclidiana</option>
            <option value="cityblock">Manhattan</option>
            <option value="minkowski">Minckoski</option>
        </select>
        <div id="output"></div>

    </div>
    <footer>
        <script type="text/javascript" src="../../static/js/barra.js"></script>
        <script type="text/javascript" src="../../static/js/upload.js"></script>
        <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
        <script src="https://cdn.jsdelivr.net/npm/popper.js@1.14.7/dist/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
        
        <script>
            <!-- Agrega el código JavaScript para asociar el evento clic al botón -->
            document.getElementById("display-btn").addEventListener("click", displayTable);

            function estandarizar() {
                console.log("estandarizando")
                fetch("{{ url_for('standarizar') }}")
                .then(function(response) {
                if (response.ok) {
                    return response.text();
                } else {
                    throw new Error('Error al ejecutar la función de escalado');
                }
                })
                .then(function(data) {
                console.log(data);
                })
                .catch(function(error) {
                console.error('Error al obtener el valor escalado:', error);
                });
                }

            function normalizar() {
                console.log("normalizando")
                fetch("{{ url_for('normalizar') }}")
                .then(function(response) {
                if (response.ok) {
                    return response.text();
                } else {
                    throw new Error('Error al ejecutar la función de escalado');
                }
                })
                .then(function(data) {
                console.log(data);
                })
                .catch(function(error) {
                console.error('Error al obtener el valor escalado:', error);
                });
            }

            function handleClick(event, functionName) {
                event.preventDefault();
                window[functionName]();
            }
            // Función para manejar el evento clic en el botón
            function displayTable() {
            // Obtener la referencia del elemento contenedor de la tabla
            var tableContainer = document.getElementById("table-container");

            // Realizar la petición para obtener los datos del CSV utilizando la URL
            var request = new XMLHttpRequest();
            request.open("GET", "{{ url_for('read_csv') }}", true);
            request.onreadystatechange = function() {
                if (request.readyState === 4 && request.status === 200) {
                var csvData = request.responseText;
                var rows = csvData.split("\n");
                var header = rows[0].split(",");
                var data = [];

                // Construir los datos de la tabla
                for (var i = 1; i < rows.length; i++) {
                    var rowData = rows[i].split(",");
                    var rowObj = {};
                    for (var j = 0; j < header.length; j++) {
                    rowObj[header[j]] = rowData[j];
                    }
                    data.push(rowObj);
                }

                // Crear la tabla utilizando Plotly
                var table = {
                    type: 'table',
                    header: {
                    values: header,
                    align: 'center',
                    line: { width: 1, color: 'black' },
                    fill: { color: 'grey' },
                    font: { family: 'Arial', size: 12, color: 'white' }
                    },
                    cells: {
                    values: Object.keys(data[0]).map(function(key) {
                        return data.map(function(row) {
                        return row[key];
                        });
                    }),
                    align: 'center',
                    line: { color: 'black', width: 1 },
                    fill: { color: ['white', 'lightgrey'] },
                    font: { family: 'Arial', size: 11, color: ['black'] }
                    }
                };

                var layout = {
                    title: 'Tabla',
                    autosize: true,
                    margin: {
                    l: 50,
                    r: 50,
                    b: 30,
                    t: 30,
                    pad: 4
                    },
                    paper_bgcolor: 'rgba(0,0,0,0)',
                    plot_bgcolor: 'rgba(0,0,0,0)'
                };

                // Renderizar la tabla utilizando Plotly
                Plotly.newPlot(tableContainer, [table], layout);
                }
            };

            // Envía la petición
            request.send();
            }
            </script>    
    </footer>
</body>
</html>
